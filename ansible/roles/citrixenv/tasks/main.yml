- name: Create Bearer token
  ansible.builtin.uri:
    url: https://api.cloud.com/cctrustoauth2/root/tokens/clients
    method: POST
    body_format: form-urlencoded
    body:
      grant_type: "client_credentials"
      client_id: "{{ citrix_client_id }}"
      client_secret: "{{ citrix_client_secret }}"
  register: token

# Enumerate Resource location and check if already exists
- name: Get current Resource Location
  ansible.builtin.uri:
    url: "https://registry.citrixworkspacesapi.net/{{ citrix_tenant }}/resourcelocations"
    method: GET
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
  register: current_resloc

# Iterate current_resloc variable searching for resource_location_name
- name: Search for already existing resource location with the same name
  set_fact:
    resloc_search: "{{ current_resloc | community.general.json_query(query) | join(', ') }}"
  vars:
    query: "json.items[?name=='{{ resource_location_name }}'].name"

- name: If resource location already exists, taking the ID in resloc_id variable
  set_fact:
    resloc_id: "{{ current_resloc | community.general.json_query(query) | join(', ') }}"
  vars:
    query: "json.items[?name=='{{ resource_location_name }}'].id"
  when: resloc_search

- name: Create Resource Location if not exists
  ansible.builtin.uri:
    url: "https://registry.citrixworkspacesapi.net/{{ citrix_tenant }}/resourcelocations"
    method: POST
    body_format: json
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
    body:
      Name: "{{ resource_location_name }}"
      internalOnly: "false"
      readOnly: "false"
  when: resloc_search != resource_location_name
  register: resloc

- name: Set resloc_id variable with resource location id 
  set_fact:
    resloc_id: "{{ resloc.json.id }}"
  when: resloc_search != resource_location_name

- name: Get SiteID
  ansible.builtin.uri:
    url: "https://api.cloud.com/cvad/manage/me"
    method: GET
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
  register: get_citrix_siteid

- name: Set citrix_siteid var
  set_fact:
    citrix_siteid: "{{ get_citrix_siteid.json.Customers[0].Sites[0].Id }}"


## WORKSPACE CONFIGURATION

- name: Get Existing storefront configuration
  ansible.builtin.uri:
    url: "https://storefrontconfiguration.citrixworkspacesapi.net/{{ citrix_tenant }}/storeconfigs"
    method: GET
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
  register: get_current_storefrontconfig


- name: Search StoreId and set store_id variable
  set_fact:
    store_id: "{{ get_current_storefrontconfig | community.general.json_query(query) | join(', ') }}"
  vars:
    query: "json.items[*].storeId"

- name: Search cloud domain already configured and set domain_search variable
  set_fact:
    domain_search: "{{ get_current_storefrontconfig | community.general.json_query(query) | join(', ') }}"
  vars:
    query: "json.items[?storeFrontDomains.contains(@,'{{ workspaceurl }}.cloud.com')].storeFrontDomains"

- name: Create workspaceurl_full variable for future iteration
  set_fact:
    workspaceurl_full: "{{ workspaceurl }}.cloud.com"

- name: check if domain name already exists
  ansible.builtin.uri:
    url: "https://storefrontconfiguration.citrixworkspacesapi.net/{{ citrix_tenant }}/domains/check/{{ workspaceurl }}"
    method: GET
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
  register: get_cloudcomain_avaiability
  when: domain_search != workspaceurl_full

# - name: Show get_current_storefrontconfig Hypervisors
#   ansible.builtin.debug:
#     var: get_cloudcomain_avaiability

- name: Modify the workspace url
  ansible.builtin.uri:
    url: "https://storefrontconfiguration.citrixworkspacesapi.net/{{ citrix_tenant }}/storeconfigs/{{ store_id }}"
    method: PUT
    body_format: json
    status_code: [200, 201]
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
    body:
      storeFrontDomains: ["{{ workspaceurl }}.cloud.com"]
      workSpaceUrlEnabled: true
  register: workspaceurl_change
  when: get_cloudcomain_avaiability.json == false

- name: Show workspaceurl_change
  ansible.builtin.debug:
    var: workspaceurl_change

## Setting Hosting Connection

- name: Get Existing hosting connections
  ansible.builtin.uri:
    url: "https://api.cloud.com/cvad/manage/hypervisors"
    method: GET
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
  register: get_citrix_hypervisors

# - name: Show Citrix Hypervisors
#   ansible.builtin.debug:
#     var: get_citrix_hypervisors

- name: Search for already existing hosting connector with the same name
  set_fact:
    resloc_search: "{{ get_citrix_hypervisors | community.general.json_query(query) | join(', ') }}"
  vars:
    query: "json.Items[?Name=='{{ hosting_connection_name }}'].Name"

- name: Create Hosting Connection
  ansible.builtin.uri:
    url: "https://api.cloud.com/cvad/manage/hypervisors"
    method: POST
    body_format: json
    status_code: [200, 201]
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
    body:
      ConnectionDetails: 
        Name: "{{ hosting_connection_name }}"
        ConnectionType: "GoogleCloudPlatform"
        ServiceAccountId: "{{ gcp_sa_name }}"
        Zone: "{{ resource_location_name }}"
        ServiceAccountCredentials: "{{ gcp_sa_privatekey }}"
      PoolDetails:
        ConnectionType: "GoogleCloudPlatform"
        Name: "{{ hosting_connection_resoucepool_name }}"
        Region: "XDHyp:\\Connections\\{{ hosting_connection_name }}\\{{ gcp_project_name }}.project\\{{ region }}.region"
        VirtualPrivateCloud: "XDHyp:\\Connections\\{{ hosting_connection_name }}\\{{ gcp_project_name }}.project\\{{ region }}.region\\{{ vpcname }}.virtualprivatecloud"
        Networks: ["XDHyp:\\Connections\\{{ hosting_connection_name }}\\{{ gcp_project_name }}.project\\{{ region }}.region\\{{ vpcname }}.virtualprivatecloud\\{{ subnetname }}.network"]
  when: resloc_search != hosting_connection_name
  register: provahosting

- name: Validate Credential for join MCS VMs
  ansible.builtin.uri:
    url: "https://{{ citrix_tenant }}.xendesktop.net/citrix/orchestration/api/techpreview/{{ citrix_tenant }}/{{ citrix_siteid }}/Identity/Users/$validate"
    method: POST
    body_format: json
    status_code: [200, 201]
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
    body:
      UserName: "Administrator"
      Domain: "{{ domain_name }}"
      Password: "{{ administrator_password }}"
  register: validatecred

- name: Create correct credential variable
  set_fact:
    cred: "{{ validatecred.json.DisplayName }}:{{ administrator_password }}"

- name: Show facts available on the system
  ansible.builtin.debug:
    var: cred

- name: Encode Administrator Password
  ansible.builtin.shell: echo "{{ cred | string | b64encode }}"
  register: encodedpass


# - name: Show facts available on the system
#   ansible.builtin.debug:
#     var: encodedpass.stdout

- name: Get current Machine Catalogs
  ansible.builtin.uri:
    url: "https://api.cloud.com/cvad/manage/MachineCatalogs"
    method: GET
    body_format: json
    status_code: [200, 201]
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
      X-AdminCredential: "Basic {{ encodedpass.stdout }}"
  register: current_machinecatalogs

# - name: Show facts available on the system
#   ansible.builtin.debug:
#     var: current_machinecatalogs

- name: Search if Machine Catalog with the same name already exists
  ansible.builtin.set_fact:
    search_machinecatalog: "{{ current_machinecatalogs | community.general.json_query(query) | join(', ') }}"
  vars:
    query: "json.Items[?Name=='{{ machinecatalog_name }}'].Name"

- name: Create Machine Catalog if not exists
  ansible.builtin.uri:
    url: "https://api.cloud.com/cvad/manage/MachineCatalogs"
    method: POST
    body_format: json
    status_code: [200, 201]
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
      X-AdminCredential: "Basic {{ encodedpass.stdout }}"
    body:
      Name: "{{ machinecatalog_name }}"
      AllocationType: "Random"
      MinimumFunctionalLevel: "L7_25"
      PersistUserChanges: "Discard"
      ProvisioningType: "MCS"
      SessionSupport: "MultiSession"
      Zone: "{{ resource_location_name }}"
      ProvisioningScheme:
        MasterImagePath: "XDHyp:\\HostingUnits\\{{ hosting_connection_resoucepool_name }}\\az-winvda01.vm"
        CpuCount: 2
        MemoryMB: 8192
        NumTotalMachines: "{{ vm2deply }}"
        NetworkMaps: [
          "NetworkPath":"XDHyp:\\HostingUnits\\{{ hosting_connection_resoucepool_name }}\\{{ subnetname }}.network"]
        MachineAccountCreationRules:
          NamingScheme: "MCS-VDA##"
          NamingSchemeType: "Numeric"
          Domain: "{{ domain_name }}"
          OU: ""
        PrepareImage: true
        DedicatedTenancy: false
        SecurityGroups: null
        UseFullDiskCloneProvisioning: false
        CustomProperties: [{
            "Name":"CatalogZones",
            "Value": "{{ gcp_project_id }}:{{ gcp_region }}:a" },
            {"Name": "StorageType",
              "Value": "pd-standard" }
          ]
  register: machinecatalog
  when: search_machinecatalog != machinecatalog_name

# - name: Show facts available on the system
#   ansible.builtin.debug:
#     var: machinecatalog

- name: Get current Machine Catalogs preparation
  ansible.builtin.uri:
    url: "https://api.cloud.com/cvad/manage/MachineCatalogs/{{ machinecatalog.json.Id }}"
    method: GET
    body_format: json
    status_code: [200, 201]
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
      X-AdminCredential: "Basic {{ encodedpass.stdout }}"
  register: check_machinecatalogs
  until: check_machinecatalogs.json.ProvisioningProgress == None
  retries: 50
  delay: 60
  when: search_machinecatalog != machinecatalog_name

- name: Create Delivery Group
  ansible.builtin.uri:
    url: "https://api.cloud.com/cvad/manage/DeliveryGroups?detailResponseRequired=true&async=false"
    method: POST
    body_format: json
    status_code: [200,201]
    headers:
      Authorization: "CwsAuth bearer={{ token.json.access_token }}"
      Citrix-CustomerId: "{{ citrix_tenant }}"
      Citrix-InstanceId: "{{ citrix_siteid }}"
    body:
      Name: "{{ deliverygroup_name }}"
      MachineCatalogs: [{
        "MachineCatalog":"{{ machinecatalog.json.Id }}",
        "Count": "{{ vm2deply }}",
        "AssignMachinesToUsers": [] }
        ]
      DeliveryType: "DesktopsAndApps"
      Desktops: [{
        "Enabled": "true",
        "IncludedUserFilterEnabled": "false",
        "IncludedUsers":[],
        "PublishedName":"CVAD_APIs_Physical_DG",
        "MaxDesktops":1 }
        ]
      MinimumFunctionalLevel: "L7_25"
      RequireUserHomeZone: false
      SimpleAccessPolicy:
        IncludedUsers: ["azdom\\administrator"]
        AllowAnonymous: false
        IncludedUserFilterEnabled: true
      UserManagement: "Studio"
  register: machinecatalog